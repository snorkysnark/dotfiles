#!/usr/bin/env python3
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileModifiedEvent
import sys
import time
import os

display_name = "Яркость"
tag_name = "brightness"
brightness_file = "/sys/class/backlight/intel_backlight/brightness"
max_brightness_file = "/sys/class/backlight/intel_backlight/max_brightness"

if len(sys.argv) > 1 and sys.argv[1] == "hdmi":
    display_name = "Яркость HDMI"
    tag_name = "brightness_hdmi"
    brightness_file = "/sys/class/backlight/ddcci3/brightness"
    max_brightness_file = "/sys/class/backlight/ddcci3/max_brightness"

with open(max_brightness_file, "r") as f:
    maxvalue = int(f.read())

def spawn_bar(value):
    os.spawnlp(os.P_WAIT, 'notify-bar', 'notify-bar', '-n', display_name, '-t', tag_name, '-v', str(value))

last_value = -1
def notify(file_path):
    global last_value
    with open(file_path, "r") as f:
        value = int(int(f.read()) / maxvalue * 100)
        if value != last_value:
            spawn_bar(value)
            last_value = value


class Handler(FileSystemEventHandler):
    def on_modified(self, event):
        if isinstance(event, FileModifiedEvent):
            notify(event.src_path)


handler = Handler()
observer = Observer()
observer.schedule(handler, path=brightness_file)
observer.start()
try:
    while True:
        sys.stdout.flush()
        time.sleep(1)
except KeyboardInterrupt:
    observer.stop()
observer.join()
